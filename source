local BeautifulNotifications = {}
BeautifulNotifications.__index = BeautifulNotifications

local DEFAULT_SETTINGS = {
    Position = UDim2.new(0.5, 0, 0.8, 0),
    AnchorPoint = Vector2.new(0.5, 0.5),
    Duration = 5,
    AnimationSpeed = 0.25,
    MaxNotifications = 5,
    Spacing = 10,
    Colors = {
        Success = Color3.fromRGB(46, 204, 113),
        Error = Color3.fromRGB(231, 76, 60),
        Warning = Color3.fromRGB(241, 196, 15),
        Info = Color3.fromRGB(52, 152, 219),
        Custom = Color3.fromRGB(155, 89, 182)
    },
    Icons = {
        Success = "rbxassetid://11157772247",
        Error = "rbxassetid://9734956085",
        Warning = "rbxassetid://8514747331",
        Info = "rbxassetid://9405926389"
    },
    Sounds = {
        Success = "rbxassetid://3450794184",
        Error = "rbxassetid://3779045779",
        Warning = "rbxassetid://1570162306",
        Info = "rbxassetid://1758229986"
    },
    Width = UDim.new(0.3, 0),
    CornerRadius = UDim.new(0, 8)
}

function BeautifulNotifications:CreateBaseElements()
    local player = game:GetService("Players").LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    
    local existingGui = playerGui:FindFirstChild("BeautifulNotifications")
    if existingGui then
        existingGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "BeautifulNotifications"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    screenGui.DisplayOrder = 10
    screenGui.Parent = playerGui

    local notificationsFolder = Instance.new("Folder")
    notificationsFolder.Name = "Notifications"
    notificationsFolder.Parent = screenGui

    self.screenGui = screenGui
    self.notificationsFolder = notificationsFolder
end

function BeautifulNotifications.init(settings)
    local self = setmetatable({}, BeautifulNotifications)
    
    self.settings = table.clone(DEFAULT_SETTINGS)
    if settings then
        for k, v in pairs(settings) do
            self.settings[k] = v
        end
    end
    
    self.notifications = {}
    self:CreateBaseElements()
    
    return self
end

local function tween(obj, props, duration, style, direction)
    local tweenInfo = TweenInfo.new(
        duration or 0.25,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    game:GetService("TweenService"):Create(obj, tweenInfo, props):Play()
end

local function setupParallaxEffect(button)
    local originalSize = button.Size
    local originalPosition = button.Position
    
    button.MouseEnter:Connect(function()
        tween(button, {Size = originalSize + UDim2.new(0, 4, 0, 4), Rotation = 5}, 0.1)
    end)
    
    button.MouseLeave:Connect(function()
        tween(button, {Size = originalSize, Rotation = 0}, 0.1)
    end)
    
    button.MouseButton1Down:Connect(function()
        tween(button, {Size = originalSize - UDim2.new(0, 2, 0, 2)}, 0.05)
    end)
    
    button.MouseButton1Up:Connect(function()
        tween(button, {Size = originalSize + UDim2.new(0, 4, 0, 4)}, 0.05)
    end)
end

function BeautifulNotifications:CreateNotification(title, message, notificationType, customSettings)
    local settings = table.clone(self.settings)
    if customSettings then
        for k, v in pairs(customSettings) do
            settings[k] = v
        end
    end
    
    if #self.notifications >= settings.MaxNotifications then
        local oldestNotification = table.remove(self.notifications, 1)
        self:RemoveNotification(oldestNotification, 0.1)
    end
    
    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "Notification"
    notificationFrame.BackgroundTransparency = 1
    notificationFrame.Size = UDim2.new(settings.Width, UDim.new(0, 0))
    notificationFrame.Position = settings.Position
    notificationFrame.AnchorPoint = settings.AnchorPoint
    notificationFrame.ClipsDescendants = true
    notificationFrame.Parent = self.notificationsFolder
    
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.Size = UDim2.new(1, 0, 1, 0)
    background.Position = UDim2.new(0, 0, 0, 0)
    background.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    background.BackgroundTransparency = 0.1
    background.Parent = notificationFrame

    local mask = Instance.new("Frame")
    mask.Name = "Mask"
    mask.Size = UDim2.new(1, 0, 1, 0)
    mask.BackgroundColor3 = background.BackgroundColor3
    mask.BackgroundTransparency = 0
    mask.ClipsDescendants = true
    mask.Parent = background

    local corner = Instance.new("UICorner")
    corner.CornerRadius = settings.CornerRadius
    corner.Parent = mask
    
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, -5, 0, -5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://5554236805"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.Parent = notificationFrame
    
    local accentBar = Instance.new("Frame")
    accentBar.Name = "AccentBar"
    accentBar.Size = UDim2.new(0, 5, 1, -20)
    accentBar.Position = UDim2.new(0, 5, 0, 10)
    accentBar.BackgroundColor3 = settings.Colors[notificationType] or settings.Colors.Custom
    accentBar.BorderSizePixel = 0

    local accentMask = Instance.new("Frame")
    accentMask.Name = "AccentMask"
    accentMask.Size = UDim2.new(1, 0, 1, 0)
    accentMask.BackgroundColor3 = accentBar.BackgroundColor3
    accentMask.ClipsDescendants = true
    accentMask.Parent = accentBar

    local accentCorner = Instance.new("UICorner")
    accentCorner.CornerRadius = UDim.new(0, 3)
    accentCorner.Parent = accentMask
    accentBar.Parent = mask
    
    local icon = Instance.new("ImageLabel")
    icon.Name = "Icon"
    icon.Size = UDim2.new(0, 28, 0, 28)
    icon.Position = UDim2.new(0, 20, 0, 15)
    icon.BackgroundTransparency = 1
    icon.Image = settings.Icons[notificationType] or settings.Icons.Info
    icon.ImageColor3 = settings.Colors[notificationType] or settings.Colors.Custom
    icon.Parent = mask
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(0.7, -60, 0, 24)
    titleLabel.Position = UDim2.new(0, 60, 0, 15)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Text = title or "Notification"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    titleLabel.Parent = mask
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.Size = UDim2.new(1, -30, 1, -60)
    messageLabel.Position = UDim2.new(0, 15, 0, 50)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.Text = message or ""
    messageLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
    messageLabel.TextSize = 14
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextWrapped = true
    messageLabel.Parent = mask
    
    local closeButton = Instance.new("ImageButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 24, 0, 24)
    closeButton.Position = UDim2.new(1, -30, 0, 15)
    closeButton.BackgroundTransparency = 1
    closeButton.Image = "rbxassetid://6031090991"
    closeButton.ImageColor3 = Color3.fromRGB(180, 180, 180)
    closeButton.Parent = mask
    
    setupParallaxEffect(closeButton)

    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.Size = UDim2.new(1, -10, 0, 3)
    progressBar.Position = UDim2.new(0, 5, 1, -8)
    progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    progressBar.BorderSizePixel = 0

    local progressMask = Instance.new("Frame")
    progressMask.Name = "ProgressMask"
    progressMask.Size = UDim2.new(1, 0, 1, 0)
    progressMask.BackgroundColor3 = progressBar.BackgroundColor3
    progressMask.ClipsDescendants = true
    progressMask.Parent = progressBar

    local progressCorner = Instance.new("UICorner")
    progressCorner.CornerRadius = UDim.new(0, 3)
    progressCorner.Parent = progressMask

    local progressFill = Instance.new("Frame")
    progressFill.Name = "ProgressFill"
    progressFill.Size = UDim2.new(1, 0, 1, 0)
    progressFill.BackgroundColor3 = settings.Colors[notificationType] or settings.Colors.Custom
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressMask
    progressBar.Parent = mask
    
    notificationFrame.Size = UDim2.new(settings.Width, UDim.new(0, 0))
    
    local textHeight = math.min(150, messageLabel.TextBounds.Y + 80)
    local targetSize = UDim2.new(settings.Width, UDim.new(0, textHeight))
    
    tween(notificationFrame, {Size = targetSize, BackgroundTransparency = 0}, settings.AnimationSpeed, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    
    if settings.Sounds[notificationType] then
        local sound = Instance.new("Sound")
        sound.SoundId = settings.Sounds[notificationType]
        sound.Volume = 0.5
        sound.Parent = notificationFrame
        sound:Play()
        game:GetService("Debris"):AddItem(sound, 3)
    end
    
    spawn(function()
        progressFill.Size = UDim2.new(1, 0, 1, 0)
        tween(progressFill, {Size = UDim2.new(0, 0, 1, 0)}, settings.Duration, Enum.EasingStyle.Linear)
    end)
    
    local removeConnection
    removeConnection = game:GetService("RunService").Heartbeat:Connect(function(dt)
        settings.Duration = settings.Duration - dt
        if settings.Duration <= 0 then
            removeConnection:Disconnect()
            self:RemoveNotification(notificationFrame, settings.AnimationSpeed)
        end
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        removeConnection:Disconnect()
        self:RemoveNotification(notificationFrame, settings.AnimationSpeed)
    end)
    
    table.insert(self.notifications, notificationFrame)
    
    self:UpdateNotificationsPositions()
    
    return notificationFrame
end

function BeautifulNotifications:RemoveNotification(notification, duration)
    for i, notif in ipairs(self.notifications) do
        if notif == notification then
            table.remove(self.notifications, i)
            break
        end
    end
    
    tween(notification, {Size = UDim2.new(notification.Size.X.Scale, 0, 0, 0), BackgroundTransparency = 1}, duration or 0.25)
    
    spawn(function()
        wait(duration or 0.25)
        if notification and notification.Parent then
            notification:Destroy()
        end
        self:UpdateNotificationsPositions()
    end)
end

function BeautifulNotifications:UpdateNotificationsPositions()
    local settings = self.settings
    local startPosition = settings.Position.Y.Scale
    local screenHeight = self.screenGui.AbsoluteSize.Y
    
    for i, notification in ipairs(self.notifications) do
        local notificationHeight = notification.AbsoluteSize.Y / screenHeight
        local spacing = settings.Spacing / screenHeight
        
        local targetPosition = UDim2.new(
            settings.Position.X.Scale,
            settings.Position.X.Offset,
            startPosition - (i-1) * (notificationHeight + spacing),
            0
        )
        
        tween(notification, {Position = targetPosition}, settings.AnimationSpeed)
    end
end

function BeautifulNotifications:Success(title, message, customSettings)
    return self:CreateNotification(title, message, "Success", customSettings)
end

function BeautifulNotifications:Error(title, message, customSettings)
    return self:CreateNotification(title, message, "Error", customSettings)
end

function BeautifulNotifications:Warning(title, message, customSettings)
    return self:CreateNotification(title, message, "Warning", customSettings)
end

function BeautifulNotifications:Info(title, message, customSettings)
    return self:CreateNotification(title, message, "Info", customSettings)
end

function BeautifulNotifications:Custom(title, message, color, icon, customSettings)
    local settings = customSettings or {}
    settings.Colors = settings.Colors or {}
    settings.Colors.Custom = color or settings.Colors.Custom
    settings.Icons = settings.Icons or {}
    settings.Icons.Custom = icon or settings.Icons.Info
    
    return self:CreateNotification(title, message, "Custom", settings)
end

return BeautifulNotifications
